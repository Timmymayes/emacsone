#+Title: Emacs US Config
#+PROPERTY: header-args:emacs-lisp :tangle ~/Projects/emacsone/init.el


* Init
#+BEGIN_SRC emacs-lisp
  (fset 'encode-utf-8
   (kmacro-lambda-form [?\M-x ?r ?e ?v ?e ?r ?t ?- ?b ?u ?f ?f ?e ?r ?- ?w ?i ?t ?h ?- ?c ?o ?d tab return ?u ?t ?f ?- ?8 return ?y ?e ?s return] 0 "%d"))
(global-set-key (kbd "C-c x e") 'encode-utf-8)
#+END_SRC

#+RESULTS:
: encode-utf-8


* Package Setup
#+begin_src emacs-lisp
  (require 'package)



  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ;;("org" . "https://orgmode.org/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")

                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (assq-delete-all 'org package--builtins)
  (assq-delete-all 'org package--builtin-versions)
  (unless package-archive-contents
   (package-refresh-contents))

                                          ; Initialize use-package on non-Linux platforms

  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)



#+end_src

#+RESULTS:
: t

* Mail with mu4e
** Config
#+BEGIN_SRC emacs-lisp
(use-package mu4e
   :ensure nil
   ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
   :config
   ;; this si set to t to avoid mail syncing issues
   (setq mu4e-change-filenames-when-moving t)
   ;; refresh mail using isync every 10 minutes
   (setq mu4e-update-interval (* 10 60))
   (setq mu4e-get-mail-command "mbsync -a")
   (setq mu4e-maildir "~/Mail")

   (setq mu4e-drafts-folder "/'[Gmail]'.Drafts")
   (setq mu4e-sent-folder "/[Gmail].Sent Mail")
   (setq mu4e-refile-folder "/[Gmail].All Mail")
   (setq mu4e-trash-folder "/[Gmail].Trash")

   (setq mu4e-maildir-shortcuts
   '(("/Inbox"                   . ?i)
     ("/[Gmail].Sent Mail"       . ?s)
     ("/[Gmail].Trash"           . ?t)
     ("/[Gmail].Drafts"          . ?d)
     ("/[Gmail].All Mail"        . ?a))))
   
#+END_SRC

#+RESULTS:
: t

#+RESULTS:mu
: t
** Hotkeys
| Key | Command                             | Description                                    |
| --  | -------------------                 | ---------------------------------------------- |
|     | *Movement*                            |                                                |
|     | ---                                 |                                                |
| n   | next-line                           | moves to next line                             |
| p   | prev-line                           | moves to prev line                             |
| [   | mu4e-headers-prev-unread            | moves to prev unread message                   |
| ]   | mu4e-headers-next-unread            | moves to next unread message                   |
| j   | mu4e-headers-jump-to-mail-dir       | Jump to another mail directory                 |
|     |                                     |                                                |
|     | *Toggles*                             |                                                |
| P   | mu4e-headers-toggle-threading       | Toggles threaded message display               |
| W   | mu4e-headers-toggle-include-related | Toggles related message display                |
|     |                                     |                                                |
|     | *Marking*                             |                                                |
| d   | mu4e-headers-mark-for-trash         | Marks message for deletion                     |
| m   | mu4e-headers-mark-for-move          | Marks message for move to folder               |
| +   | mu4e-headers-mark-for-flag          | Marks message for flagging                     |
| -   | mu4e-headers-mark-for-unflag        | Marks smessage for unflagging                  |
| %   | mu4e-headers-mark-for-pattern       | Marks based on a regex pattern                 |
| u   | mu4e-headers-mark-for-unmark        | Removes mark for message                       |
| U   | mu4e-mark-unmark-all                | Removes mark for all marks in view             |
| x   | mu4e-mark-execute-all               | Execute all marks in view                      |
|     |                                     |                                                |
|     | *Searching*                           |                                                |
| s   | mu4e-headers-search                 | Search all e-mails                             |
| S   | mu4e-headers-search-edit            | Edit current search (useful!!)                 |
| /   | mu4e-headers-search-narrow          | Narrow down the current results                |
| b   | mu4e-headers-search-bookmark        | Select a bookmark to search with               |
| B   | mu4e-headers-search-bookmark-edit   | Edit bookmark before search                    |
| g   | mu4e-rerun-search                   | Rerun current search                           |


* Basic UI Config
#+begin_src emacs-lisp
    (setq inhibit-startup-message t)

    (scroll-bar-mode -1) ;Disable visible scrollbar
    (tool-bar-mode -1)   ;DIsable toolbar
    (tooltip-mode -1)    ;disable tooltips11
    (set-fringe-mode 10) ;give some breathing room

    (menu-bar-mode -1)   ;disable menu bar

  ; setup the visible bell

    (setq visible-bell t)

  ;set font

    (set-face-attribute 'default nil :font "Fira Code Retina" :height 140)
  ; load theme note this passes an object denoted by a leading `


    (load-theme 'tango-dark)


    (desktop-save-mode 1)
    












#+end_src

#+RESULTS:
: t

** Themes
#+begin_src emacs-lisp
                                          ;set doom themes
    (use-package doom-themes
      :ensure t
      :config
      ;;(load-theme 'doom-gruvbox t))
      (load-theme 'doom-sourcerer t))
    
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config 
      (setq doom-modeline-height 15))

#+end_src

#+RESULTS:
: t

** DONE Transparency
CLOSED: [2022-06-01 Wed 13:18]
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 . 50))
  (add-to-list 'default-frame-alist '(alpha . (85 . 50)))

  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(85 . 50) '(100 . 100)))))
  (global-set-key (kbd "C-c x t") 'toggle-transparency)

#+END_SRC

#+RESULTS:

* Emacs Usability
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

#+RESULTS:
: helpful-key

** Whichkey
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish (which-key-mode)
  :config
  (setq which-key-idle-delay 1))

#+end_src

#+RESULTS:
: t

** Completion
#+begin_src emacs-lisp
  
;;           (use-package counsel
;;             :bind (("M-x" . counsel-M-x)
;;                    ("C-x b" . counsel-ibuffer)


;; story)))

  ;;        (use-package ivy-richt
    ;;        :init
      ;;      (ivy-rich-mode 1))

          (use-package vertico
            :ensure t
            :custom
            (vertico-cycle t)
            :init
            (vertico-mode))
  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))



#+end_src

#+RESULTS:

** Yas Mode
#+BEGIN_SRC emacs-lisp

(yas-global-mode 1)
#+END_SRC

#+RESULTS:
: t



* Window Control
#+BEGIN_SRC emacs-lisp
(use-package ace-window)



(custom-set-faces
 '(aw-leading-char-face
   ((t (:inherit ace-jump-face-foreground :height 3.0)))))



(global-set-key (kbd "C-M-]") 'avy-goto-word-or-subword-1)
;; unbund c-] from abort-recursive-edit
(global-set-key (kbd "C-+") 'smartscan-symbol-go-backward)
(global-set-key (kbd "C-=") 'smartscan-symbol-go-forward)
(global-set-key (kbd "M-RET") 'counsel-ibuffer)



#+END_SRC

#+RESULTS:
: counsel-ibuffer

#+RESULTS:[]
: counsel-ibuffer

* Org Config Setup
** initial package setup
#+begin_src emacs-lisp
  ;;;;; Org mode setup ;;;;;

                                          ;require tempo

  (defun org-mode-setup()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1))


  (use-package org
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-agenda-files
          '("~/Orgfiles/tasks.org"
            "~/Orgfiles/habits.org"))

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)
    (setq org-capture-babel-evaluate t)
    (setq org-startup-with-inline-images t)

                                          ; org capture

    (setq org-capture-templates
          '(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Orgfiles/tasks.org" "Inbox")
             "* TODO %?\n %U\n %a\n %i" :empty-lines 1)
            ("ts" "Clockked Entry Subtask" entry (clock)
             "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Orgfiles/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;;
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Orgfiles/journal.org")
             "* %<%I:%M %P> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Orgfiles/journal.org")
             "* Checking Email :email:\n\n%?" :clockin :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")

            ("mw" "Weight" table-line (file+headline "~/Orgfiles/metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t))))

                                          ; hotkey bindings
    (define-key global-map (kbd "C-c o")
      (lambda () (interactive) (org-capture)))

    (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

    (define-key global-map (kbd "C-c t")
    (lambda () (interactive) (org-capture nil "tt")))

    (global-set-key (kbd "C-c a") 'org-agenda)


                                          ; refile targets


    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))
                                          ; load org habits
    (require 'org-habit)
     (add-to-list 'org-modules 'org-habit)
     (setq org-habit-graph-column 60)



  ;;;;; end org mode setup ;;;;; 

#+end_src

#+RESULTS:
: 60

** Font Configuration
#+begin_src emacs-lisp
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
                                            ; keep a few things fixed pitch as they should be for line ups

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  ;  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

#+end_src
** bullets and dashes
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


					;replace dashes with dots

(font-lock-add-keywords 'org-mode
                         '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))			   

#+end_src
** Structure Templates
#+begin_src emacs-lisp
    ;; This is needed as of Org 9.2
 ;  (require 'org-tempo)
  ;  (with-eval-after-load 'org-tempo
        (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
       (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")) 
        (add-to-list 'org-structure-template-alist '("py" . "src python"))


#+end_src
** Language Setup
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp .t )
     (js .t)
     (python .t)))

#+end_src

#+RESULTS:

** Auto-Tangle Config Files
#+begin_src emacs-lisp
;;auto tangle my emacs config file
  (defun emacsone/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
		        (expand-file-name "~/Projects/emacsone/OrgFiles/emacsconf.org"))
      ;; dynamic scoping
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))
    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'emacsone/org-babel-tangle-config)))
#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'emacsone/org-babel-tangle-config)) | (closure (org--rds reftex-docstruct-symbol org-element-greater-elements visual-fill-column-width org-clock-history org-agenda-current-date org-with-time org-defdecode org-def org-read-date-inactive org-ans2 org-ans1 org-columns-current-fmt-compiled org-clock-current-task org-clock-effort org-agenda-skip-function org-agenda-skip-comment-trees org-agenda-archives-mode org-end-time-was-given org-time-was-given org-log-note-extra org-log-note-purpose org-log-post-message org-last-inserted-timestamp org-last-changed-timestamp org-entry-property-inherited-from org-blocked-by-checkboxes org-state org-agenda-headline-snapshot-before-repeat org-agenda-buffer-name org-agenda-start-on-weekday org-agenda-buffer-tmp-name org-priority-regexp org-mode-abbrev-table org-mode-syntax-table buffer-face-mode-face org-tbl-menu org-org-menu org-struct-menu org-entities org-last-state org-id-track-globally org-clock-start-time texmathp-why remember-data-file org-agenda-tags-todo-honor-ignore-options iswitchb-temp-buflist calc-embedded-open-mode calc-embedded-open-formula calc-embedded-close-formula align-mode-rules-list org-emphasis-alist org-emphasis-regexp-components org-export-registered-backends org-modules crm-separator org-babel-load-languages org-id-overriding-file-name org-indent-indentation-per-level org-element--timestamp-regexp org-element-paragraph-separate org-inlinetask-min-level t) nil (add-hook 'change-major-mode-hook 'org-show-all 'append 'local)) | (closure (org-src-window-setup *this* org-babel-confirm-evaluate-answer-no org-babel-tangle-uncomment-comments org-src-preserve-indentation org-src-lang-modes org-edit-src-content-indentation org-babel-library-of-babel t) nil (add-hook 'change-major-mode-hook #'org-babel-show-result-all 'append 'local)) | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Visual Fill Mode
#+begin_src emacs-lisp
    (defun org-mode-visual-fill()
      (setq visual-fill-column-width 150 visual-fill-column-center-text t)
      (visual-fill-column-mode 1))


    (use-package visual-fill-column
      :hook (org-mode . org-mode-visual-fill)) 

#+end_src
** Pomodoro
#+BEGIN_SRC emacs-lisp 

(setq org-clock-sound "~/Downloads/cheer.wav")
#+END_SRC

#+RESULTS:
: ~/Downloads/cheer.wav

* Org-Roam Setup
#+BEGIN_SRC emacs-lisp


          (use-package org-roam
            :ensure t
            :init
            (setq org-roam-v2-act t)
            :custom
            (org-roam-directory "~/RoamNotes")
            (org-roam-completion-everywhere t)
            ( org-agenda-todo-list-sublevels nil)        

            :bind
            (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n i" . org-id-get-create)
             ("C-c n a" . org-roam-alias-add)
             ("C-c n t" . org-roam-tag-add)
             ("C-c n r" . org-roam-ref-add)
             ("C-c n x a" . org-roam-alias-remove)
             ("C-c n x r" . org-roam-ref-remove)
             ("C-c n x t" . org-roam-tag-remove)

             ("C-c n I" . org-roam-node-insert-immediate)
             :map org-mode-map
             ("C-c n b" . org-mark-ring-goto)
             :map org-roam-dailies-map
             ("Y" . org-roam-dailies-capture-yesterday)
             ("T" . org-roam-dailies-capture-tomorrow))

             :bind-keymap
             ("C-c n d" . org-roam-dailies-map)
             :config
             (require 'org-roam-dailies)
             (org-roam-db-autosync-mode))

      ;;  Bind this to C-c n I
        (defun org-roam-node-insert-immediate (arg &rest args)
          (interactive "P")
          (let ((args (cons arg args))
                (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                          '(:immediate-finish t)))))
            (apply #'org-roam-node-insert args)))  



            (with-eval-after-load "org-roam" 
              (setq org-roam-capture-templates
                    '(("d" "default" plain
                       "%?"
                       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
                       :unnarrowed t)
                      ;; programming language
                      ("l" "programming language" plain
                       "* Characteristics\n\n- Family: %?\n- Inspired by: \n\n* Reference:\n\n"
                       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
                       :unnarrowed t)
                      ;; programming insight - javascript
                      ("i" "Programming Insights" plain
                      "* Problem\n\n* Insight:\n\n* Solution:\n\n* Refactoring:\n\n* Fig1:\n\n#+BEGIN_SRC javascript\n\n\n#+END_SRC"
                       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
                       :unnarrowed t)
                      ("b" "book notes" plain
                       "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
                       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\nest")
                       :unnarrowed t))))


  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:15}" 'face 'org-tag)))

            (use-package org-roam-ui
              :bind ("s-r" . org-roam-ui-open))


#+END_SRC

#+RESULTS:
: org-roam-ui-open

* Ledger-Mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)
    :bind (
           :map ledger-mode-map
            ("s-n" . ledger-navigate-next-uncleared)
            ("s-p" . ledger-navigate-previous-uncleared))
    :mode "\\.dat\\'")

    (setq ledger-reports
          '(("bal"            "%(binary) -f %(ledger-file) bal")
            ("bal this month" "%(binary) -f %(ledger-file) bal -p %(month) -S amount")
            ("bal this year"  "%(binary) -f %(ledger-file) bal -p 'this year'")
            ("net worth"      "%(binary) -f %(ledger-file) bal Assets Liabilities")
            ("account"        "%(binary) -f %(ledger-file) reg %(account)")))



#+END_SRC

#+RESULTS:
| bal            | %(binary) -f %(ledger-file) bal                       |
| bal this month | %(binary) -f %(ledger-file) bal -p %(month) -S amount |
| bal this year  | %(binary) -f %(ledger-file) bal -p 'this year'        |
| net worth      | %(binary) -f %(ledger-file) bal Assets Liabilities    |
| account        | %(binary) -f %(ledger-file) reg %(account)            |

* IDE Setup
** To add

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :bind (("s-m m" . magit-status)
           ("s-m j" . magit-dispatch)
           ("s-m k" . magit-file-dispatch)
           ("s-m l" . magit-log-buffer-file)
           ("s-m b" . magit-blame))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  (setq magit-clone-default-directory "~/Projects/")

  ;; Bindings



#+end_src

#+RESULTS:
: ~/Projects/

** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))
  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+END_SRC

#+RESULTS:
: t

** Forge
#+begin_src emacs-lisp
(use-package forge)
#+end_src

** Git from Clipboard
#+begin_src emacs-lisp

(defun ar/git-clone-clipboard-url ()
  "Clone git URL in clipboard asynchronously and open in dired when finished."
  (interactive)
  (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" (current-kill 0)) nil "No URL in clipboard")
  (let* ((url (current-kill 0))
         (download-dir (expand-file-name "~/Downloads/"))
         (project-dir (concat (file-name-as-directory download-dir)
                              (file-name-base url)))
         (default-directory download-dir)
         (command (format "git clone %s" url))
         (buffer (generate-new-buffer (format "*%s*" command)))
         (proc))
    (when (file-exists-p project-dir)
      (if (y-or-n-p (format "%s exists. delete?" (file-name-base url)))
          (delete-directory project-dir t)
        (user-error "Bailed")))
    (switch-to-buffer buffer)
    (setq proc (start-process-shell-command (nth 0 (split-string command)) buffer command))
    (with-current-buffer buffer
      (setq default-directory download-dir)
      (shell-command-save-pos-or-erase)
      (require 'shell)
      (shell-mode)
      (view-mode +1))
    (set-process-sentinel proc (lambda (process state)
                                 (let ((output (with-current-buffer (process-buffer process)
                                                 (buffer-string))))
                                   (kill-buffer (process-buffer process))
                                   (if (= (process-exit-status process) 0)
                                       (progn
                                         (message "finished: %s" command)
                                         (dired project-dir))
                                     (user-error (format "%s\n%s" command output))))))
    (set-process-filter proc #'comintoutput-filter)))
#+end_src



** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src
** Rainbow Deliminators
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Electric Pair mode
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'electric-pair-mode)
(add-hook 'prog-mode-hook 'electric-indent-mode)
(global-set-key (kbd "C-c s (") 'electric-pair-mode)


#+END_SRC

#+RESULTS:
| electric-indent-mode | electric-pair-mode | my-display-numbers-hook | rainbow-delimiters-mode |
** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)

(defun my-display-numbers-hook ()
  (display-line-numbers-mode t)
  )
(add-hook 'prog-mode-hook 'my-display-numbers-hook)
(add-hook 'text-mode-hook 'my-display-numbers-hook)
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

#+RESULTS:
** subword mode
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

#+RESULTS:
| subword-mode | my-display-numbers-hook | electric-indent-mode | electric-pair-mode | rainbow-delimiters-mode | git-gutter-mode |

** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-;" . evilnc-comment-or-uncomment-lines))
#+end_src

** Mini-map
#+BEGIN_SRC emacs-lisp
(use-package minimap)

(setq minimap-window-location 1)

(global-set-key (kbd "C-c s m")  'minimap-mode)
#+END_SRC

#+RESULTS:
: minimap-mode

** Languages
*** HTML & CSS
Some possible html modes to look into:
http://xahlee.info/emacs/emacs/emacs_html.html
http://xahlee.info/emacs/emacs/xah-css-mode.html
**** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode)
(setq web-mode-enable-current-column-highlight t)
(setq web-mode-enable-current-element-highlight t)
; hook into web mode for file types
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
;;using rsjx mode
;;(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
;(add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.xml\\'" . web-mode))
;; using rsjx mode
;;(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))

; set company completions vocab to css and html

(setq web-mode-enable-engine-detection t)

#+END_SRC

#+RESULTS:
: t
**** TODO emmet-mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
:bind
("M-n" . emmet-next-edit-point)
("M-p" . emmet-prev-edit-point))
; use emmet in all web-mode docs
(add-hook 'web-mode-hook 'emmet-mode)
(add-hook 'css-mode-hook 'emmet-mode)

; enable mode switching between css and java
(add-hook 'web-mode-before-auto-complete-hooks
    '(lambda ()
     (let ((web-mode-cur-language
  	    (web-mode-language-at-pos)))
               (if (string= web-mode-cur-language "php")
    	   (yas-activate-extra-mode 'php-mode)
      	 (yas-deactivate-extra-mode 'php-mode))
               (if (string= web-mode-cur-language "css")
    	   (setq emmet-use-css-transform t)
      	 (setq emmet-use-css-transform nil)))))




#+END_SRC

#+RESULTS:
| lambda | nil | (let ((web-mode-cur-language (web-mode-language-at-pos))) (if (string= web-mode-cur-language php) (yas-activate-extra-mode (quote php-mode)) (yas-deactivate-extra-mode (quote php-mode))) (if (string= web-mode-cur-language css) (setq emmet-use-css-transform t) (setq emmet-use-css-transform nil))) |
**** css-mode
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Language Server
#+begin_src emacs-lisp
  ; breadcrumb setup

  (defun lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

    (use-package lsp-mode
      :commands (lsp lsp-deffered)
      :hook (lsp-mode . lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (lsp-enable-which-key-integration t))
    ; turn on lsp ui

    (use-package lsp-ui
      :after lsp
      :hook (lsp-mode . lsp-ui-mode)
      :config
      (setq lsp-ui-doc-position 'bottom))

    (use-package lsp-treemacs
      :after lsp)
    (setq treemacs-select-when-already-in-treemacs 'close)




#+end_src

#+RESULTS:
: close
*** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src
*** Javascript
Following setup from here: https://www.chadstovern.com/javascript-in-emacs-revisited/
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :mode ("\\.js\\'"
           "\\.jsx\\'")
    :config
    (setq js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          js2-basic-offset 2
          js-indent-level 2)
    ;; (setq-local flycheck-disabled-checkers (cl-union flycheck-disabled-checkers
    ;;                                                  '(javascript-jshint))) ; jshint doesn't work for JSX
     (electric-pair-mode 1))

  (use-package add-node-modules-path
    :defer t
    :hook (((js2-mode rjsx-mode) . add-node-modules-path)))

  ;; prettify

  (use-package prettier-js
    :defer t
    :diminish prettier-js-mode
    :hook (((js2-mode rjsx-mode) . prettier-js-mode)))

  ;; setup lsp mode
  (use-package lsp-mode
    :defer t
    :diminish lsp-mode
    :hook (((js2-mode rjsx-mode) . lsp))
    :commands lsp
    :config
    (setq lsp-auto-configure t
          lsp-auto-guess-root t
          ;; don't set flymake or lsp-ui so the default linter doesn't get trampled
          lsp-diagnostic-package :none))



  (use-package lsp-ui
    :defer t
    :config
    (setq lsp-ui-sideline-enable t
          ;; disable flycheck setup so default linter isn't trampled
          lsp-ui-flycheck-enable nil
          lsp-ui-sideline-show-symbol nil
          lsp-ui-sideline-show-hover nil
          lsp-ui-sideline-show-code-actions nil
          lsp-ui-peek-enable nil
          lsp-ui-imenu-enable nil
          lsp-ui-doc-enable nil))


  (defun my-js-comint-keys ()
    "My Keys for sending to the js-comint repl"
    (interactive)
    (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
    (local-set-key (kbd"C-c b") 'js-send-buffer)
    (local-set-key (kbd"C-c r") 'js-send-region)
    (local-set-key (kbd"C-c C-r") 'js-send-region-and-go))




  (require 'js-comint)
  (setq inferior-js-program-command "node --interactive")
  (setenv "NODE_NO_READLINE" "1")
  (add-hook 'rjsx-mode-hook 'my-js-comint-keys)
  (add-hook 'rjsx-mode-hook 'emmet-mode)


  (with-eval-after-load 'flycheck
    (flycheck-add-next-checker 'javascript-eslint '(t . javascript-jscs)))





#+END_SRC

#+RESULTS:
*** Haxe
#+BEGIN_SRC emacs-lisp
;; This isn't really a package, it just provides a `haxe-mode' to work with
(use-package haxe-mode
  :mode ("\\.hx\\'" . haxe-mode)
  :no-require t
  :init
  (require 'js)
  (define-derived-mode haxe-mode js-mode "Haxe"
    "Haxe syntax highlighting mode. This is simply using js-mode for now."))

(use-package battle-haxe
  :hook (haxe-mode . battle-haxe-mode)
  :bind (("S-<f4>" . #'pop-global-mark) ;To get back after visiting a definition
         :map battle-haxe-mode-map
         ("<f5>" . #'battle-haxe-goto-definition)
         ("<f12>" . #'battle-haxe-helm-find-references))
  :custom
  (battle-haxe-yasnippet-completion-expansion t "Keep this if you want yasnippet to expand completions when it's available.")
  (battle-haxe-immediate-completion nil "Toggle this if you want to immediately trigger completion when typing '.' and other relevant prefixes."))
#+END_SRC

#+RESULTS:

** Better Completions
#+begin_src emacs-lisp
      (use-package company
      :after lsp-mode
      :hook ((lsp-mode web-mode) . company-mode)
      :bind (:map company-active-map
                  ( "<tab>" . company-complete-selection))
      (:map lsp-mode-map
            ("<tab>" . company-indent-or-complete-common)) 
  )
      (setq company-minimum-prefix-length 2)



    (use-package company-web
  :after company)


  (defun my-web-mode-hook ()
    (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files)))  

  (add-hook 'web-mode-hook 'my-web-mode-hook)

  ;; Company mode for yas
  (global-set-key (kbd "<C-tab>") 'company-yasnippet)
    ;  (use-ackage company-box
     ;   :hook (company-mode . company-box-mode))
#+end_src

#+RESULTS:
: company-yasnippet

** Debugging
Dap mode here: https://www.youtube.com/watch?v=0bilcQVSlbM

* Macros and rebind

** Dabbrev
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-=") 'dabbrev-expand
                  )
  (global-set-key (kbd "M-C-=") 'dabbrev-completion)
#+END_SRC
** next-tag - "C-x t" - Move inside the next tag set in web-mode
#+BEGIN_SRC emacs-lisp
    (defun next-tag()
      (interactive)
        (web-mode-element-next)
        (web-mode-tag-end))



    (global-set-key  (kbd "C-x t") 'next-tag)

  ;; timer controls
  (global-set-key (kbd "H-t t") 'org-timer-set-timer)
  (global-set-key (kbd "H-t s") 'org-timer-start)
  (global-set-key (kbd "H-t x") 'org-timer-stop)
  (global-set-key (kbd "H-t z") 'org-timer-pause-or-continue)


    ;; set ctrl z to undo
    (global-set-key (kbd "C-z") 'undo)

#+END_SRC

#+RESULTS:
: undo

#+RESULTS::
: next-tag
** Window Movement
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-+") 'other-window)
  (global-set-key (kbd "M-[") 'ace-window)
  (global-set-key (kbd "M-]") 'treemacs-select-window)
  (global-set-key (kbd "C-c s t") 'treemacs)
  (global-set-key (kbd "H-1") 'delete-other-windows)
  (global-set-key (kbd "H-2") 'split-window-below)
  (global-set-key (kbd "H-3") 'split-window-right)
#+END_SRC

#+RESULTS:
: split-window-right

** TODO Cursor Movement
#+BEGIN_SRC emacs-lisp
    (defun insert-line-above-and-go ()
      ;;insert a line above the current one and move the cursor there
      (interactive)
      (previous-line nil)
      (move-end-of-line nil)
      (electric-newline-and-maybe-indent)
      (indent-relative-first-indent-point))

    (global-set-key (kbd "M-o") 'insert-line-above-and-go)

    ;;
    ;

    ; ;

    ;; move C-j to C-; indent-new-comment-line
    (global-set-key (kbd "C-;") 'indent-new-comment-line)

    (global-set-key (kbd "H-]") 'xref-find-references)
    (global-set-key (kbd "H-[") 'xref-go-back)
    (global-set-key (kbd "H-g") 'goto-line)

    (defun wrap-sexp-backward-with-parenthesis()
      (interactive)
      (backward-sexp)
      (mark-sexp) 
      (insert-parentheses))

      (global-set-key (kbd "C-(") 'wrap-sexp-backward-with-parenthesis)


    (global-set-key (kbd "s-a") 'ace-jump-word-mode)


    (global-set-key (kbd "M-m")  (kmacro-lambda-form [?\C-u ?\C-x ?\C-x] 0 "%d"))



#+End_SRC

#+RESULTS:
| lambda | (&optional arg) | Keyboard macro. | (interactive p) | (kmacro-exec-ring-item '([21 24 24] 0 %d) arg) |
** Delete at cursor
#+BEGIN_SRC emacs-lisp
(defun kill-word-at-point()
  (interactive)
  (kill-word 1)
  (backward-kill-word 1))

  (global-set-key (kbd "M-DEL") 'kill-word-at-point)

(defun kill-line-at-point()
  (interactive)
  (back-to-indentation)
  (kill-line))
  
  (global-set-key (kbd "s-l") 'kill-line-at-point)


#+END_SRC

#+RESULTS:
: kill-line-at-point

#+-
**  Duplicate Lines
#+BEGIN_SRC emacs-lisp
  (defun duplicate-current-line()
    "Duplicates the entire line under point. Repetable with 'd' "
    (interactive)
    (back-to-indentation)
    (kill-line)
    (yank)
    (newline)
    (indent-for-tab-command)
    (yank)
    (set-temporary-overlay-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "d") 'duplicate-current-line)
        map)))

  (defun duplicate-line-up-to-point()
   "Duplicates a line from start of indentation up to point. May be repeated with single 'd' presses."
    (interactive)
    (set-mark-command nil)
    (back-to-indentation)
    (kill-ring-save (region-beginning) (region-end))
    (end-of-line)
    (newline)
  ;; example of single key repeat functionality
    (yank)
    (set-temporary-overlay-map
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "d") 'duplicate-line-up-to-point)
        map)))


  (global-set-key (kbd "H-s-d") 'duplicate-current-line
                  )
  (global-set-key (kbd "H-d") 'duplicate-line-up-to-point)









#+END_SRC

#+RESULTS:
: duplicate-line-up-to-point
** Register manipulation
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-,") 'point-to-register)
(global-set-key (kbd "C-.") 'jump-to-register)
(global-set-key (kbd "H-s") 'bookmark-set)
(global-set-key (kbd "H-j") 'bookmark-jump)



#+END_SRC

#+RESULTS:
: bookmark-jump
* dired
** Hotkeys to remember
- m: mark files
- u: umark files
- U: unmark all files
- % -> m: reg expession mark
- * : mark by type
- ( : expand or collapse details
- k : kill marked files ( will kill from view but not delete)
- g : reload buffer
- * t: invert marked files
- S : create sym link
** config
#+BEGIN_SRC emacs-lisp
; list directories first
(setq dired-listing-switches "-agho --group-directories-first")
(setq dired-dwim-target t)


#+END_SRC
#+RESULTS:
: t
** SIngle Dired Buffer
#+BEGIN_SRC emacs-lisp
(use-package dired-single)
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
:hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

#+RESULTS:
| all-the-icons-dired-mode | dired-hide-dotfiles-mode | dired-hide-dotfiles | doom-modeline-set-project-modeline |
** Dired-Open
#+BEGIN_SRC emacs-lisp

;(use-package dired-open) look into this package if you end up needing it.

#+END_SRC
** Hide Dot Files
- hotkey: . (dot)
#+BEGIN_SRC emacs-lisp
(defun my-dired-mode-hook ()
  "My `dired' mode hook."
  ;; To hide dot-files by default
  (dired-hide-dotfiles-mode))

;; To toggle hiding
(define-key dired-mode-map "." #'dired-hide-dotfiles-mode)
(add-hook 'dired-mode-hook #'my-dired-mode-hook)

#+END_SRC

#+RESULTS:
| my-dired-mode-hook | all-the-icons-dired-mode | dired-hide-dotfiles-mode | dired-hide-dotfiles | doom-modeline-set-project-modeline |
* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
:ensure t
:config
(dashboard-setup-startup-hook))

#+END_SRC

#+RESULTS:
: t

* Testing
#+BEGIN_SRC emacs-lisp

  ;;set load path for person elisp
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (global-set-key (kbd "C-M-i") 'indent-region)
  ;; load the package iy-go-to-char
  (load "iy-go-to-char")
  ;; rebind back-to-indentation to "M-i" NOTE this unbinds!! tab-to-tab-stop
  (global-set-key (kbd "M-i") 'back-to-indentation)
  ;; rebind "M-m" iy-go-to-char
  (global-set-key (kbd "s-n") 'iy-go-to-char)
  ;;unbind C-m from return  
  (global-set-key (kbd "s-h") 'iy-go-up-to-char)
  (global-set-key (kbd "s-b") 'iy-go-to-char-backward)
  (global-set-key (kbd "s-g") 'iy-go-up-to-char-backward)

  ;; Line to copy - start with a macro
  ;; eventually make this your first fully functional lisp
  (fset 'yank-and-add-line-numbers
        (kmacro-lambda-form [?\C-x ?r ?N ?\C-x ?\C-x ?÷ ?\C-z] 0 "%d"))
  (global-set-key (kbd "s-k") 'yank-and-add-line-numbers) 

  ;; insert todays date


  (fset 'agenda-fullscreen
        (kmacro-lambda-form [?\C-c ?a ?a ?\C-x ?1] 0 "%d"))

  (global-set-key (kbd "<f13>") 'agenda-fullscreen)
  (global-set-key (kbd "<f14>") 'browse-url-of-buffer)

  (require 'calfw-org)
  (global-set-key (kbd "H-a") 'avy-goto-char-timer)


#+END_SRC

#+RESULTS:
: avy-goto-char-timer

* Homebrew Harpoon
#+BEGIN_SRC emacs-lisp


  (defvar active-harpoon)
  (setq active-harpoon 102)

  (defun current-buffer-is-harpooned (marker)
    (and (eq (marker-buffer marker) (current-buffer))))  

  (defun harpoon-f ()
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 102)
    (setq active-harpoon 102))

  (defun set-harpoon-f ()
    (interactive)
    (point-to-register 102)
    (setq active-harpoon 102)    
    )

  (defun harpoon-d ()
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 100)
    (setq active-harpoon 100))

  (defun set-harpoon-d ()
    (interactive)
    (point-to-register 100)
    (setq active-harpoon 100)    
    )

  (defun harpoon-a ()
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 97)
    (setq active-harpoon 97))

  (defun set-harpoon-a ()
    (interactive)
    (point-to-register 97)
    (setq active-harpoon 97)    
    )

  (defun harpoon-s ()
    (interactive)
    (if (current-buffer-is-harpooned (get-register active-harpoon)) (point-to-register active-harpoon))
    (jump-to-register 115)
    (setq active-harpoon 115))

  (defun set-harpoon-s ()
    (interactive)
    (point-to-register 115)
    (setq active-harpoon 115)
    )

  (global-set-key (kbd "H-a") 'harpoon-a)
  (global-set-key (kbd "C-H-a") 'set-harpoon-a)
  (global-set-key (kbd "H-s") 'harpoon-s)
  (global-set-key (kbd "C-H-s") 'set-harpoon-s)
  (global-set-key (kbd "H-d") 'harpoon-d)
  (global-set-key (kbd "C-H-d") 'set-harpoon-d)
  (global-set-key (kbd "H-f") 'harpoon-f)
  (global-set-key (kbd "C-H-f") 'set-harpoon-f)

#+END_SRC

#+RESULTS:
: set-harpoon-f

#+RESULTS:
: set-harpoon-f

* Read Desktop
#+BEGIN_SRC emacs-lisp
      (desktop-read)
#+END_SRC

